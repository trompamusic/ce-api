import { join } from 'path'
import { makeAugmentedSchema } from 'neo4j-graphql-js'
import { transformSchema } from 'graphql-tools'
import walkSync from 'walk-sync'
import { resolvers } from './resolvers'
import { authenticationFieldTransformer } from './transformers/authenticationFieldTransformer'
import { subscriptionFieldTransformer } from './transformers/subscriptionFieldTransformer'
import { createdUpdatedFieldTransformer } from './transformers/createdUpdatedFieldTransformer'
import { additionalTypeFieldTransformer } from './transformers/additionalTypeFieldTransformer'
import concatenate from './utils/concatenate'

/*
 * Determine type definitions from which to auto generate queries and mutations
 */
const graphQlFiles = walkSync(join(__dirname, '/schema'), {
  directories: false,
  includeBasePath: true,
  globs: ['**/**/*.graphql']
})
const typeDefs = concatenate(graphQlFiles)

const config = {
  query: {
    exclude: [
      '_ThingCreateMutationPayload'
    ]
  },
  mutation: {
    exclude: [
      'Subscription',
      '_ThingCreateMutationPayload'
    ]
  }
}

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */
export const schema = transformSchema(
  makeAugmentedSchema({
    allowUndefinedInResolve: true,
    typeDefs,
    resolvers,
    config
  }),
  [
    subscriptionFieldTransformer,
    authenticationFieldTransformer,
    createdUpdatedFieldTransformer,
    additionalTypeFieldTransformer
  ]
)
