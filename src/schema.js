import { makeAugmentedSchema } from 'neo4j-graphql-js'
import { TransformRootFields, transformSchema } from 'graphql-tools'
import concatenate from 'concatenate'
import walkSync from 'walk-sync'
import { resolvers } from './resolvers'
import { verifyRequest } from './auth'

/*
 * Determine type definitions from which to auto generate queries and mutations
 */
const graphQlFiles = walkSync(`${__dirname}/schema`, {
  directories: false,
  includeBasePath: true,
  globs: ['**/**/*.graphql']
})
const typeDefs = concatenate.sync(graphQlFiles)

const addDirectives = (schema) => {
  return transformSchema(schema, [
    new TransformRootFields((operation, fieldName, field) => {
      // authentication is only needed for Mutations
      if (operation === 'Mutation') {
        const next = field.resolve
        field.resolve = (object, params, context, info) => {
          // verify request with a generated scope, e.g. Mutation:DeleteControlAction, Mutation.CreatePerson, ...
          verifyRequest(context, `${operation}:${fieldName}`)

          return next(object, params, context, info)
        }
      }
      return undefined
    })
  ])
}

const config = {
  mutation: {
    exclude: [
      'Subscription'
    ]
  }
}

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */
export const schema = addDirectives(makeAugmentedSchema({
  allowUndefinedInResolve: true,
  typeDefs,
  resolvers,
  config
}))
